@using Azure.Core;
@using Azure.Identity;
@using Azure.ResourceManager;
@using Azure.ResourceManager.Resources;
@using Azure.ResourceManager.Network;
@using Azure.ResourceManager.Network.Models;
@using Microsoft.AspNetCore.Authorization;
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication;
@using AzureFirewallCalculator.Core;
@using AzureFirewallCalculator.Core.ArmSource;
@using AzureFirewallCalculator.Core.Dns;
@using AzureFirewallCalculator.Core.Tags;

@page "/load-from-resource-manager"
@attribute [Authorize]

@inject ArmService ArmService;
@inject IDnsResolver DnsResolver;

<PageTitle>Firewall</PageTitle>

<label>Subscription: </label>
<InputSelect @bind-Value:get="SelectedSubscriptionId" @bind-Value:set="SubscriptionSelected">
    <option selected disabled>Select a Subscription</option>
    @foreach (var subscription in Subscriptions)
    {
        <option value="@subscription.Id.SubscriptionId">@subscription.Data.DisplayName</option>
    }
</InputSelect>


<label>Firewall: </label>
<InputSelect @bind-Value:get="SelectedFirewallId" @bind-Value:set="FirewallSelected">
    <option selected disabled>Select a Firewall</option>
    @foreach (var firewall in Firewalls)
    {
        <option value="@firewall.Id">@firewall.Name</option>
    }
</InputSelect>

<CheckTraffic Firewall="@ConvertedFirewall" />


@code {
    protected List<SubscriptionResource> Subscriptions = new();

    protected List<AzureFirewallData> Firewalls = new();

    protected List<IPGroupData> IpGroups = new();

    protected SubscriptionResource? SelectedSubscription;

    protected string? SelectedSubscriptionId => SelectedSubscription?.Id.SubscriptionId;

    protected AzureFirewallData? SelectedFirewall;

    protected string? SelectedFirewallId => SelectedFirewall?.Id.ToString();

    private Core.Firewall? ConvertedFirewall;

    private ServiceTagsListResult? ServiceTags;

    protected override async Task OnInitializedAsync()
    {
        await LoadSubscriptions();
    }

    protected async Task LoadSubscriptions()
    {
        Subscriptions = await ArmService.GetSubscriptions();
    }

    protected async Task SubscriptionSelected(string? subscriptionId)
    {
        SelectedSubscription = Subscriptions.FirstOrDefault(item => item.Id.SubscriptionId == subscriptionId);

        if (SelectedSubscription == null)
        {
            return;
        }

        Firewalls = await ArmService.GetFirewalls(SelectedSubscription);
    }

    protected async Task FirewallSelected(string? firewallId)
    {
        SelectedFirewall = Firewalls.FirstOrDefault(item => item.Id == firewallId);

        if (SelectedFirewall?.Location == null || SelectedSubscription == null)
        {
            return;
        }

        IpGroups = await ArmService.GetIpGroups(SelectedFirewall);
        ServiceTags = await ArmService.GetServiceTags(SelectedSubscription, SelectedFirewall.Location);

        if (ServiceTags == null)
        {
            return;
        }

        ConvertedFirewall = await ArmService.ConvertToFirewall(SelectedFirewall, IpGroups, ServiceTags);
    }
}
