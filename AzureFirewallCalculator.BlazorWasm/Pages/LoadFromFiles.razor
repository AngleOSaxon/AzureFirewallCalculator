@using AzureFirewallCalculator.Core;
@using PowershellSource = AzureFirewallCalculator.Core.PowershellSource;
@using AzureFirewallCalculator.Core.Dns;
@using AzureFirewallCalculator.Core.Tags;

@page "/load-from-files"
@inject IDnsResolver DnsResolver

<PageTitle>Firewall</PageTitle>

<label>Ip Groups:</label> <InputFile OnChange="@ReadIpGroups" />
<label>Firewall:</label><InputFile OnChange="@ReadFirewall" />
<label>Service Tags:</label><InputFile OnChange="@ReadServiceTags" />

<CheckTraffic Firewall="@Firewall" />

@code {
    private Firewall? Firewall;

    private Dictionary<string, PowershellSource.IpGroup>? IpGroups;

    private PowershellSource.Firewall? PowershellFirewall;

    private ServiceTags? ServiceTags;

    protected async Task ReadIpGroups(InputFileChangeEventArgs e)
    {
        var stream = e.File.OpenReadStream(maxAllowedSize: 1024 * 1024 * 10);
        IpGroups = (await System.Text.Json.JsonSerializer.DeserializeAsync<PowershellSource.IpGroup[]>(stream))!.ToDictionary(item => item.Id, StringComparer.CurrentCultureIgnoreCase);
        await ConvertFirewall();
    }

    protected async Task ReadFirewall(InputFileChangeEventArgs e)
    {
        var stream = e.File.OpenReadStream(maxAllowedSize: 1024 * 1024 * 10);
        PowershellFirewall = await System.Text.Json.JsonSerializer.DeserializeAsync<PowershellSource.Firewall>(stream);
        await ConvertFirewall();
    }

    protected async Task ReadServiceTags(InputFileChangeEventArgs e)
    {
        var stream = e.File.OpenReadStream(maxAllowedSize: 1024 * 1024 * 10);

        ServiceTags = await System.Text.Json.JsonSerializer.DeserializeAsync<ServiceTags>(stream, new System.Text.Json.JsonSerializerOptions
            {
                PropertyNamingPolicy = System.Text.Json.JsonNamingPolicy.CamelCase
            });
        await ConvertFirewall();
    }

    protected async Task ConvertFirewall()
    {
        if (IpGroups == null || PowershellFirewall == null || ServiceTags == null)
        {
            return;
        }

        Firewall = await PowershellFirewall.Value.ConvertToFirewall(IpGroups, DnsResolver, ServiceTags);
    }
}
